<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.9.0@8b9ad1eb9e8b7d3101f949291da2b9f7767cd163">
  <file src="src/Cache/Engine/FileEngine.php">
    <TooManyTemplateParams>
      <code>$iterator</code>
    </TooManyTemplateParams>
  </file>
  <file src="src/Cache/Engine/RedisEngine.php">
    <InvalidReturnStatement>
      <code><![CDATA[$this->_Redis->set($key, $value)]]></code>
      <code><![CDATA[$this->_Redis->setEx($key, $duration, $value)]]></code>
      <code>$value</code>
      <code>$value</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>bool</code>
      <code>int|false</code>
      <code>int|false</code>
    </InvalidReturnType>
  </file>
  <file src="src/Collection/CollectionTrait.php">
    <InvalidArrayOffset>
      <code>$collectionArraysCounts[$changeIndex]</code>
      <code>$value[$keys[$index]]</code>
    </InvalidArrayOffset>
  </file>
  <file src="src/Collection/Iterator/ZipIterator.php">
    <MissingTemplateParam>
      <code>ZipIterator</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Controller/Component/RequestHandlerComponent.php">
    <RedundantCondition>
      <code>is_string($type)</code>
    </RedundantCondition>
  </file>
  <file src="src/Database/Expression/QueryExpression.php">
    <RedundantCondition>
      <code>$typeMultiple</code>
    </RedundantCondition>
  </file>
  <file src="src/Database/Query.php">
    <MissingTemplateParam>
      <code>IteratorAggregate</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Database/Statement/PDOStatement.php">
    <RedundantCondition>
      <code><![CDATA[$property === 'queryString' && isset($this->_statement->queryString)]]></code>
    </RedundantCondition>
  </file>
  <file src="src/Error/Renderer/ConsoleExceptionRenderer.php">
    <InvalidArrayOffset>
      <code>$exceptions[$i - 1]</code>
    </InvalidArrayOffset>
  </file>
  <file src="src/I18n/DateFormatTrait.php">
    <RedundantCondition>
      <code>$time !== false</code>
    </RedundantCondition>
  </file>
  <file src="src/ORM/SaveOptionsBuilder.php">
    <MissingTemplateParam>
      <code>SaveOptionsBuilder</code>
    </MissingTemplateParam>
  </file>
  <file src="src/Shell/Helper/TableHelper.php">
    <InvalidCast>
      <code>$v</code>
    </InvalidCast>
  </file>
  <file src="src/TestSuite/Constraint/EventFired.php">
    <InternalClass>
      <code>new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )</code>
    </InternalClass>
    <InternalMethod>
      <code>new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )</code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/Constraint/EventFiredWith.php">
    <InternalClass>
<<<<<<< HEAD
      <code><![CDATA[new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )]]></code>
      <code><![CDATA[new AssertionFailedError(sprintf(
                'Event `%s` was fired %d times, cannot make data assertion',
=======
      <code>new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )</code>
      <code><![CDATA[new AssertionFailedError(sprintf(
                'Event "%s" was fired %d times, cannot make data assertion',
>>>>>>> 4.next
                $other,
                count($events)
            ))]]></code>
    </InternalClass>
    <InternalMethod>
<<<<<<< HEAD
      <code><![CDATA[new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )]]></code>
      <code><![CDATA[new AssertionFailedError(sprintf(
                'Event `%s` was fired %d times, cannot make data assertion',
=======
      <code>new AssertionFailedError(
                'The event manager you are asserting against is not configured to track events.'
            )</code>
      <code><![CDATA[new AssertionFailedError(sprintf(
                'Event "%s" was fired %d times, cannot make data assertion',
>>>>>>> 4.next
                $other,
                count($events)
            ))]]></code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/Constraint/Response/ResponseBase.php">
    <InternalClass>
      <code><![CDATA[new AssertionFailedError('No response set, cannot assert content.')]]></code>
    </InternalClass>
    <InternalMethod>
      <code><![CDATA[new AssertionFailedError('No response set, cannot assert content.')]]></code>
    </InternalMethod>
  </file>
  <file src="src/TestSuite/Constraint/Session/FlashParamEquals.php">
    <InternalClass>
      <code>new AssertionFailedError($message)</code>
    </InternalClass>
    <InternalMethod>
      <code>new AssertionFailedError($message)</code>
    </InternalMethod>
  </file>
  <file src="src/Utility/Filesystem.php">
    <TooManyTemplateParams>
      <code>$iterator</code>
      <code>$iterator</code>
    </TooManyTemplateParams>
  </file>
  <file src="src/Utility/Hash.php">
    <RedundantCondition>
      <code>is_array($_list)</code>
    </RedundantCondition>
  </file>
</files>
